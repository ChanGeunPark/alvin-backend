generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id        String      @id @default(cuid())
  email     String   @unique
  password  String
  profileImage String?
  bannerImage String?
  nickname  String?
  bio       String?
  role      RoleStatus 
  verified  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  verification Verification?
  ArtWorks  ArtWork[]
  Likes     Like[]
  Collections Collection[]
  Comments  Comment[]
  Followings Follow[] @relation("following")
  Followers Follow[] @relation("follower")
}


model Verification{
  id        String       @id @default(cuid())
  code      String   @unique
  userId    String      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model ArtWork{
  id        String       @id @default(cuid())
  title     String
  description String?
  tags      String[]
  image     String
  width     Int?
  height    Int?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  // Relations
  collections Collection[]
  Likes     Like[]
  Tags      Tag[]
  Comments  Comment[]


  @@index([userId])

}

model Collection{
  id        String      @id @default(cuid())
  title      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artworkId String 

  // Relations
  artwork   ArtWork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@index([userId])
}

model Comment{
  id        String    @id @default(cuid())
  content   String
  userId    String
  artworkId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork   ArtWork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@index([userId])

}

model Like{
  id        String      @id @default(cuid())
  userId    String
  artworkId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork   ArtWork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@index([userId])

}

model Tag{
  id        String      @id @default(cuid())
  name      String   @unique
  artworkId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artwork   ArtWork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
}

model Follow{
  id            String      @id @default(cuid())
  followingId   String
  followerId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  following      User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
}


// Enums
enum RoleStatus {
  Client
  Owner
  Admin
}

